name: Build Padavan Firmware

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Build Padavan"
        required: true
        default: "build"
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Cache toolchain
      uses: actions/cache@v3
      id: toolchain-cache
      with:
        path: /tmp/toolchain-cache
        key: toolchain-${{ hashFiles('**/dl_toolchain.sh') }}
        
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
        cpio git python3-docutils gettext automake autopoint texinfo build-essential help2man \
        pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget
        
    - name: Prepare workspace
      run: |
        mkdir -p $GITHUB_WORKSPACE/images
        git clone --depth=1 https://github.com/Bobby-Lang/padavan-4.4.git $GITHUB_WORKSPACE/rt-n56u
        
    - name: Setup toolchain
      run: |
        cd $GITHUB_WORKSPACE/rt-n56u/toolchain-mipsel
        
        # 使用缓存如果存在
        if [ -f "/tmp/toolchain-cache/toolchain-mipsel.tar.gz" ]; then
          echo "Using cached toolchain"
          tar -xzf /tmp/toolchain-cache/toolchain-mipsel.tar.gz
        else
          echo "Downloading toolchain"
          sh dl_toolchain.sh || exit 1
          
          # 缓存工具链
          mkdir -p /tmp/toolchain-cache
          tar -czf /tmp/toolchain-cache/toolchain-mipsel.tar.gz .
        fi
        
    - name: Build Firmware
      env:
        TNAME: MI-R4A
      run: |
        cd $GITHUB_WORKSPACE/rt-n56u/trunk
        
        # 1. 检查模板是否存在
        if [ ! -f "configs/templates/$TNAME.config" ]; then
          echo "::error::configs/templates/$TNAME.config not found"
          exit 1
        fi
        
        # 2. 准备配置文件
        cp -f configs/templates/$TNAME.config .config || exit 1
        
        # 3. 配置修改
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=y/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_MENTOHUST=y/CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=y/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_SRELAY=y/CONFIG_FIRMWARE_INCLUDE_SRELAY=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=n/g' .config
        
        # 4. 添加自定义配置
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_XRAY=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_DDNSTO=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_DDNSGO=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_WIREGUARD=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_CLOUDFLARE=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ALDRIVER=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_FTPD=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_ALIST=y" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_SQM=n" >> .config
        echo "CONFIG_FIRMWARE_INCLUDE_OC=y" >> .config
        echo 'CONFIG_FIRMWARE_MT7621_OC="0x3B2"' >> .config
        
        # 5. 清理和构建（移除sudo）
        ./clear_tree || exit 1
        ./build_firmware_modify $TNAME 0 || exit 1
        
        # 6. 移动生成的固件（使用相对路径）
        if [ -d "images" ]; then
          mv -v images/*.bin $GITHUB_WORKSPACE/images/
          echo "Firmware files found:"
          ls -lh $GITHUB_WORKSPACE/images/
        else
          echo "::error::No firmware files generated in images/"
          exit 1
        fi
        
    - name: Upload firmware artifacts
      if: ${{ success() }}  # 仅在构建成功时上传
      uses: actions/upload-artifact@v4
      with:
        name: Padavan-Firmware-${{ env.TNAME }}
        path: $GITHUB_WORKSPACE/images/*.bin
