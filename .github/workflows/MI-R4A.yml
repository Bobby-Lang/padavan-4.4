name: Build Padavan Firmware

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Build Padavan"
        required: true
        default: "build"
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd \
        cpio git python3-docutils gettext automake autopoint texinfo build-essential help2man \
        pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget
        
    - name: Prepare workspace
      run: |
        echo "Workspace path: $GITHUB_WORKSPACE"
        mkdir -p $GITHUB_WORKSPACE/images
        echo "Cloning Padavan source code..."
        git clone --depth=1 https://github.com/jinenge/padavan-4.4.git $GITHUB_WORKSPACE/rt-n56u || { echo "::error::Git clone failed"; exit 1; }
        echo "Source code cloned successfully"
        
    - name: Setup toolchain
      run: |
        cd $GITHUB_WORKSPACE/rt-n56u/toolchain-mipsel
        echo "Downloading toolchain..."
        sh dl_toolchain.sh || { echo "::error::Toolchain download failed"; exit 1; }
        echo "Toolchain setup completed"
        
    - name: Build Firmware
      env:
        TNAME: MI-R4A
      run: |
        set -euo pipefail  # 更严格的错误处理
        echo "Starting firmware build for $TNAME"
        cd $GITHUB_WORKSPACE/rt-n56u/trunk
        
        # 1. 检查模板是否存在
        echo "Checking for template config..."
        if [ ! -f "configs/templates/$TNAME.config" ]; then
          echo "::error::configs/templates/$TNAME.config not found"
          echo "Available templates:"
          ls -la configs/templates/ || true
          exit 1
        fi
        
        # 2. 准备配置文件
        echo "Copying template config..."
        cp -fv configs/templates/$TNAME.config .config || exit 1
        
        # 3. 配置修改
        echo "Modifying configuration..."
        # 备份原始配置以便调试
        cp .config .config.original
        
        # 修改现有配置项
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=y/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_MENTOHUST=y/CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=y/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_SRELAY=y/CONFIG_FIRMWARE_INCLUDE_SRELAY=n/g' .config
        sed -i 's/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=n/g' .config
        
        # 4. 添加自定义配置 - 修复配置冲突
        echo "Adding custom configuration..."
        {
          echo "# Custom configuration added by build script"
          echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y"
          echo "CONFIG_FIRMWARE_INCLUDE_XRAY=n"
          echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=n"
          echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=n"
          echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=n"
          echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=y"
          # 修复冲突的配置项 - ADGUARDHOME 只设置一次
          echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=y"
          echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=n"
          echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=n"
          echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=n"
          echo "CONFIG_FIRMWARE_INCLUDE_DDNSTO=n"
          echo "CONFIG_FIRMWARE_INCLUDE_DDNSGO=n"
          echo "CONFIG_FIRMWARE_INCLUDE_WIREGUARD=n"
          echo "CONFIG_FIRMWARE_INCLUDE_CLOUDFLARE=y"
          echo "CONFIG_FIRMWARE_INCLUDE_ALDRIVER=n"
          echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n"
          echo "CONFIG_FIRMWARE_INCLUDE_FTPD=n"
          echo "CONFIG_FIRMWARE_INCLUDE_ALIST=y"
          echo "CONFIG_FIRMWARE_INCLUDE_SQM=n"
          echo "CONFIG_FIRMWARE_INCLUDE_OC=y"
          echo 'CONFIG_FIRMWARE_MT7621_OC="0x3B2"'
        } >> .config
        
        # 5. 检查配置差异（用于调试）
        echo "Configuration differences:"
        diff .config.original .config || true
        
        # 6. 清理工作区
        echo "Cleaning workspace..."
        ./clear_tree || { echo "::warning::Clean command failed, continuing anyway"; }
        
        # 7. 构建固件 - 启用详细日志并捕获输出
        echo "Building firmware with verbose output..."
        
        # 创建日志文件并实时输出到控制台
        rm -f build.log
        touch build.log
        tail -f build.log &  # 后台实时输出日志
        
        # 运行构建命令并捕获所有输出
        ./build_firmware_modify $TNAME 0 V=1 2>&1 | tee -a build.log || { 
          echo "::error::Firmware build failed";
          # 显示错误部分日志
          echo "Last 50 lines of build log:";
          tail -n 50 build.log;
          echo "Error section from build log:";
          grep -i -A 20 -B 10 'error\|fail\|undefined' build.log || true;
          exit 1;
        }
        
        # 停止后台日志输出
        kill %1
        
        # 8. 移动生成的固件
        echo "Moving firmware images..."
        if ls images/*.bin >/dev/null 2>&1; then
          mv -v images/*.bin $GITHUB_WORKSPACE/images/
          echo "Firmware files:"
          ls -lh $GITHUB_WORKSPACE/images/
        else
          echo "::error::No firmware files generated in images/"
          echo "Generated files in images/:"
          ls -R images/ || true
          exit 1
        fi
        
        echo "Build completed successfully!"
        
    - name: Upload build log
      if: always()  # 总是上传日志，即使失败
      uses: actions/upload-artifact@v4
      with:
        name: build-log-${{ env.TNAME }}
        path: $GITHUB_WORKSPACE/rt-n56u/trunk/build.log
        
    - name: Upload firmware artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: Padavan-Firmware-${{ env.TNAME }}
        path: $GITHUB_WORKSPACE/images/*.bin
